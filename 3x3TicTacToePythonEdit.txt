#Set variables
main = grid()
coordPlayed = ["roof"]
move = 0

#To check the os
import os
print(os.name)

#For Color
try:
	import curses
except:
	if os.name = 'nt'
		print("You have been detected running windows, please run this command first")
		print("python -m pip install windows-curses")
		exit
	else
		print("Something went wrong! Please try to install the Curses module")
screen = curses.initscr()
curses.start_color()
if has_colors() == true
	curses.init_pair(0, curses.COLOR_GREEN, curses.COLOR_BLACK)
	curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLUE)
	curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_RED)
	curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK)

#Test correct size
num_rows, num_cols = screen.getmaxyx()
if num_rows < 9
	print("Please increase your terminal size")
	exit
if num_cols < 15
	print("Please increase your terminal size")
	exit


#Set up GUI
win = curses.newwin(0, 0, curses.LINES - 1, curses.COLS - 1)
screen.addstr(0, 0, "┏━━━┳━━━┳━━━┓", curses.color_pair(0))
screen.addstr(1, 0, "┃ ? ┃ ? ┃ ? ┃", curses.color_pair(0))
screen.addstr(2, 0, "┣━━━╋━━━╋━━━┫", curses.color_pair(0))
screen.addstr(3, 0, "┃ ? ┃ ? ┃ ? ┃", curses.color_pair(0))
screen.addstr(4, 0, "┣━━━╋━━━╋━━━┫", curses.color_pair(0))
screen.addstr(5, 0, "┃ ? ┃ ? ┃ ? ┃", curses.color_pair(0))
screen.addstr(6, 0, "┗━━━┻━━━┻━━━┛", curses.color_pair(0))
screen.addstr(8, 0, "Please enter the place you want to go: ", curses.color_pair(0))
screen.addstr(9, 0, "It is " + curPlayer + "'s turn", curses.color_pair(0)
#Apply screen changes
refresh()
	
#Class for 3x3 Grid
#+--------------+
#| A1 | A2 | A3 |
#|--------------|
#| B1 | B2 | B3 |
#|--------------|
#| C1 | C2 | C3 |
#+--------------+
class grid:
	def __init__(self, solved, A1, A2, A3, B1, B2, B3, C1, C2, C3):
		self.solved = false
		self.A1 = "?"
		self.A2 = "?"
		self.A3 = "?"
		self.B1 = "?"
		self.B2 = "?"
		self.B3 = "?"
		self.C1 = "?"
		self.C2 = "?"
		self.C3 = "?"

	def checkwin(self):
		if self.A1 == self.A2 and self.A2 == self.A3:
			self.solved = true
		elif self.B1 == self.B2 and self.B2 == self.B3:
			self.solved = true
		elif self.C1 == self.C2 and self.C2 == self.C3:
			self.solved = true
		elif self.A1 == self.B1 and self.B1 == self.C1:
			self.solved = true
		elif self.A2 == self.B2 and self.B2 == self.C2:
			self.solved = true
		elif self.A3 == self.B3 and self.B3 == self.C3:
			self.solved = true
		elif self.A1 == self.B2 and self.B2 == self.C3:
			self.solved = true
		elif self.A3 == self.B2 and self.B2 == self.C1:
			self.solved = true
		else:
			self.solved = false

	def checksolved(self):	
		if self.solved == true:
			pass
		else:
			pass

def possibleMove(*coords):
	if move = 1:
		coordPlayed.insert(len.coordPlayed - 1, A1)
	elif move = 2:
		coordPlayed.insert(len.coordPlayed - 1, A2)
	elif move = 3:
		coordPlayed.insert(len.coordPlayed - 1, A3)
	elif move = 4:
		coordPlayed.insert(len.coordPlayed - 1, B1)
	elif move = 5:
		coordPlayed.insert(len.coordPlayed - 1, B2)
	elif move = 6:
		coordPlayed.insert(len.coordPlayed - 1, B3)
	elif move = 7:
		coordPlayed.insert(len.coordPlayed - 1, C1)
	elif move = 8:
		coordPlayed.insert(len.coordPlayed - 1, C2)
	elif move = 9:
		coordPlayed.insert(len.coordPlayed - 1, C3)
	else
		pass

#Play game


#End of Program
curses.nocbreak()
stdscr.keypad(False)
curses.echo()
curses.endwin()
